import sys

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def min_distance(self, dist, visited):
        min_dist = sys.maxsize
        min_index = -1

        for v in range(self.V):
            if dist[v] < min_dist and not visited[v]:
                min_dist = dist[v]
                min_index = v

        return min_index

    def dijkstra(self, src):
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        visited = [False] * self.V

        for _ in range(self.V):
            u = self.min_distance(dist, visited)
            visited[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and not visited[v] and dist[v] > dist[u] + self.graph[u][v]:
                    dist[v] = dist[u] + self.graph[u][v]

        return dist

# Example usage
vertices = 5
g = Graph(vertices)
g.graph = [
    [0, 10, 20, 0, 0],
    [10, 0, 5, 30, 0],
    [20, 5, 0, 15, 20],
    [0, 30, 15, 0, 25],
    [0, 0, 20, 25, 0]
]

source = 0
optimal_costs = g.dijkstra(source)

print("Optimal Costs from source vertex %d:" % source)
for i in range(vertices):
    print("Vertex %d: Cost %d" % (i, optimal_costs[i]))
